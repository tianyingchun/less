// Name:            Grid
//
// Description:     Mobile first 12 列网格系统，基于浮动布局；相对定位实现 push / pull
//
//                  Breakpoint:
//                    sm: <= 640px
//                    md: 641px <= 1024px
//                    lg: >1024px
//
// Component:       `.row`
//
// Sub-objects:     `.col-{point}-{n}`
//
// =============================================================================

/* ==========================================================================
   Component: Grid
 ============================================================================ */

// Mixins
// =============================================================================

.reset-order(@point) {
  .@{ns}col-@{point}-reset-order {
    margin-left: 0;
    margin-right: 0;
    left: auto;
    right: auto;
    float: left;
  }
}

.col-basic() {
  [class*="@{ns}col-"] {
    width: 100%;
    padding-left: @grid-gutter;
    padding-right: @grid-gutter;
    float: left;
    position: relative;

    // Float the last col to right
    & + &:last-child {
      float: right;
    }

    // Not float the last col
    & + &.@{ns}col-end {
      float: left;
    }

    @media @medium-up {
      & {
        padding-left: @grid-gutter-md;
        padding-right: @grid-gutter-md;
      }
    }
  }

  // [class*="@{ns}col-pull-"],
  // [class*="@{ns}col-push-"] {
  //  position: relative;
  // }

  [class*="@{ns}col-pull-"] {
    left: auto;
  }

  [class*="@{ns}col-push-"] {
    right: auto;
  }
}

.col-misc(@point) {
  [class*="@{ns}col-"] {
    // 居中的网格
    &.@{ns}col-@{point}-centered {
      margin-left: auto;
      margin-right: auto;
      float: none;

      &:last-child {
        float: none;
      }
    }

    &.@{ns}col-@{point}-uncentered {
      margin-left: 0;
      margin-right: 0;
      float: left;

      &:last-child {
        float: left;
      }
    }
  }
}

// calc grid: width, push, pull, offset
.calc-grid-col (@point: sm, @type, @n: @grid-columns, @i: 1) when
  (@type = width) and (@i =< @n) {
  .@{ns}col-@{point}-@{i} {
    width: (@i * 100% / @n);
  }
}

.calc-grid-col (@point: sm, @type, @n: @grid-columns, @i: 1) when
  (@type = push) and (@i = 1) {
  .@{ns}col-@{point}-push-0 {
    left: 0;
  }
}

.calc-grid-col (@point: sm, @type, @n: @grid-columns, @i: 1) when
  (@type = push) and (@i < @n) {
  .@{ns}col-@{point}-push-@{i} {
    left: @i * (100% / @n);
  }
}

.calc-grid-col (@point: sm, @type, @n: @grid-columns, @i: 1) when
  (@type = pull) and (@i = 1) {
  .@{ns}col-@{point}-pull-0 {
    right: 0;
  }
}

.calc-grid-col (@point: sm, @type, @n: @grid-columns, @i: 1) when
  (@type = pull) and (@i < @n) {
  .@{ns}col-@{point}-pull-@{i} {
    right: @i * (100% / @n);
  }
}

.calc-grid-col (@point: sm, @type, @n: @grid-columns, @i: 1) when
  (@type = offset) and (@i = 1) {
  .@{ns}col-@{point}-offset-0 {
    margin-left: 0;
  }
}

.calc-grid-col (@point: sm, @type, @n: @grid-columns, @i: 1) when
  (@type = offset) and (@i < @n) {
  .@{ns}col-@{point}-offset-@{i} {
    margin-left: @i * (100% / @grid-columns);
  }
}

.loop-cols (@point: sm, @type, @n: @grid-columns, @i: 1) when (@i =< @n) {
  .calc-grid-col(@point, @type, @n, @i);
  .loop-cols(@point, @type, @grid-columns, (@i + 1));
}

.make-cols(@point) {
  .loop-cols(@point, width);
  .loop-cols(@point, pull);
  .loop-cols(@point, push);
  .loop-cols(@point, offset);
  .reset-order(@point);
  .col-misc(@point);
}


// Container
.@{ns}container {
  .grid-container();

  > .@{ns}row {
    width: auto;
    margin-left: -@grid-gutter;
    margin-right: -@grid-gutter;

    @media @medium-up {
      margin-left: -@grid-gutter-md;
      margin-right: -@grid-gutter-md;
    }
  }
}

.@{ns}row {
  margin: 0 auto;
  width: 100%;
  .clearfix();

  // Nested grid
  & & {
    margin-left: -@grid-gutter;
    margin-right: -@grid-gutter;
    width: auto;

    &.@{ns}row-collapse {
      margin-left: 0;
      margin-right: 0;
      width: auto;
    }

    // Increasing gutter for medium and large screen
    @media @medium-up {
      margin-left: -@grid-gutter-md;
      margin-right: -@grid-gutter-md;
    }
  }

  &.@{ns}row-collapse & {
    margin-left: 0;
    margin-right: 0;
  }
}

// no padding
.@{ns}row-collapse {
  [class*="@{ns}col-"] {
    padding-left: 0;
    padding-right: 0;
  }
}

// Fixed width row
.@{ns}row-fixed {
  max-width: @grid-max-width;
}

.col-basic();

@media @screen {
  .make-cols(sm);
}

@media @medium-up {
  .make-cols(md);
}

@media @large-up {
  .make-cols(lg);
}


// Hooks
// =============================================================================

// Core grid, No hooks
